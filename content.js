// content.js

// --- Configuration ---
const ALL_TIME_BUTTON_SELECTOR = 'button.MuiButtonBase-root.MuiButton-root.MuiButton-text'; // –ë—ñ–ª—å—à –∑–∞–≥–∞–ª—å–Ω–∏–π —Å–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–Ω–æ–ø–∫–∏ –¥–∞—Ç–∏
const ALL_TIME_BUTTON_TEXT_SELECTOR = 'p.MuiTypography-root.jss367'; // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç—É –≤—Å–µ—Ä–µ–¥–∏–Ω—ñ –∫–Ω–æ–ø–∫–∏ –¥–∞—Ç–∏ (—É—Ç–æ—á–Ω–µ–Ω–æ)
const ALL_TIME_MENU_ITEM_SELECTOR = 'li.MuiMenuItem-root div > p.MuiTypography-root'; // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Ç–µ–∫—Å—Ç—É "–ó–∞ –≤–µ—Å—å —á–∞—Å" –≤ –º–µ–Ω—é
const ALL_TIME_TEXT = '–ó–∞ –≤–µ—Å—å —á–∞—Å';
const TRANSACTION_LIST_SELECTOR = '.ReactVirtualized__Grid.ReactVirtualized__List'; // –°–µ–ª–µ–∫—Ç–æ—Ä –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ —Å–ø–∏—Å–∫—É
const TRANSACTION_ROW_SELECTOR = '.jss542.jss543.cypress-log-row'; // –°–µ–ª–µ–∫—Ç–æ—Ä —Ä—è–¥–∫–∞ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
const DATE_SELECTOR = '.jss588 p.MuiTypography-root.jss590'; // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –¥–∞—Ç–∏ –≤ —Ä—è–¥–∫—É
const AMOUNT_SELECTOR = '.jss599 p.MuiTypography-root.jss601'; // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è —Å—É–º–∏
const COMMENT_SELECTOR = '.jss553 p.MuiTypography-root.jss545'; // –°–µ–ª–µ–∫—Ç–æ—Ä –¥–ª—è –∫–æ–º–µ–Ω—Ç–∞—Ä—è

const SCROLL_STEP = 300; // –ö—Ä–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –ø—ñ–∫—Å–µ–ª—è—Ö
const SCROLL_DELAY = 350; // –ó–∞—Ç—Ä–∏–º–∫–∞ –º—ñ–∂ –∫—Ä–æ–∫–∞–º–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ –≤ –º—Å
const MAX_WAIT_TIME = 10000; // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ –º—Å
const HIGHLIGHT_PERIOD_COLOR = 'rgba(144, 238, 144, 0.3)'; // –°–≤—ñ—Ç–ª–æ-–∑–µ–ª–µ–Ω–∏–π –¥–ª—è –ø–µ—Ä—ñ–æ–¥—É
const HIGHLIGHT_MATCH_COLOR = 'rgba(255, 215, 0, 0.4)'; // –ó–æ–ª–æ—Ç–∏—Å—Ç–∏–π –¥–ª—è –∑–±—ñ–≥—ñ–≤ –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏
const HIGHLIGHT_BORDER = '1px solid #00B28E';
// –î–æ–¥–∞—î–º–æ —Å—Ç–∏–ª—ñ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è —Å—Ç–≤–æ—Ä–µ–Ω–Ω—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
function showResultsModal(reportData, periodInfo) {
  // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞, —á–∏ –≤–∂–µ —ñ—Å–Ω—É—î –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
  if (document.querySelector('.result-modal-overlay')) {
    document.querySelector('.result-modal-overlay').remove();
  }

  // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç–∏ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const modalOverlay = document.createElement('div');
  modalOverlay.className = 'result-modal-overlay';

  const modal = document.createElement('div');
  modal.className = 'result-modal';

  // –ó–∞–≥–æ–ª–æ–≤–æ–∫ –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const header = document.createElement('div');
  header.className = 'result-modal-header';
  
  const title = document.createElement('h3');
  title.className = 'result-modal-title';
  title.textContent = '–†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É';
  
  const closeButton = document.createElement('button');
  closeButton.className = 'result-modal-close';
  closeButton.innerHTML = '&times;';
  closeButton.setAttribute('aria-label', '–ó–∞–∫—Ä–∏—Ç–∏');
  closeButton.onclick = () => modalOverlay.remove();
  
  header.appendChild(title);
  header.appendChild(closeButton);

  // –ö–æ–Ω—Ç–µ–Ω—Ç –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞
  const content = document.createElement('div');
  content.className = 'result-modal-content';

  // –ë–ª–æ–∫ –∑ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—î—é –ø—Ä–æ –ø–µ—Ä—ñ–æ–¥
  const summary = document.createElement('div');
  summary.className = 'result-modal-summary';
  
  const periodText = document.createElement('p');
  periodText.innerHTML = `<strong>–ü–µ—Ä—ñ–æ–¥:</strong> ${periodInfo}`;
  summary.appendChild(periodText);
  
  const totalText = document.createElement('p');
  if (reportData.count > 0) {
    totalText.innerHTML = `<strong>–ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:</strong> <span class="highlight">${reportData.count}</span>`;
  } else {
    totalText.innerHTML = `<strong>–ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π:</strong> 0`;
  }
  summary.appendChild(totalText);
  
  if (reportData.count > 0) {
    const amountText = document.createElement('p');
    amountText.innerHTML = `<strong>–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞:</strong> <span class="highlight">${reportData.totalAmount.toFixed(2)} ‚Ç¥</span>`;
    summary.appendChild(amountText);
  }
  
  content.appendChild(summary);

  // –¢–∞–±–ª–∏—Ü—è –∑ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—è–º–∏ –∞–±–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
  if (reportData.count > 0) {
    const table = document.createElement('table');
    table.className = 'result-modal-table';
    
    // –ó–∞–≥–æ–ª–æ–≤–æ–∫ —Ç–∞–±–ª–∏—Ü—ñ
    const thead = document.createElement('thead');
    const headerRow = document.createElement('tr');
    
    ['–î–∞—Ç–∞', '–ß–∞—Å', '–°—É–º–∞', '–ö–æ–º–µ–Ω—Ç–∞—Ä'].forEach(headerText => {
      const th = document.createElement('th');
      th.textContent = headerText;
      headerRow.appendChild(th);
    });
    
    thead.appendChild(headerRow);
    table.appendChild(thead);
    
    // –¢—ñ–ª–æ —Ç–∞–±–ª–∏—Ü—ñ
    const tbody = document.createElement('tbody');
    
    reportData.transactions.forEach(tx => {
      const row = document.createElement('tr');
      
      const dateCell = document.createElement('td');
      dateCell.textContent = tx.date;
      row.appendChild(dateCell);
      
      const timeCell = document.createElement('td');
      timeCell.textContent = tx.time;
      row.appendChild(timeCell);
      
      const amountCell = document.createElement('td');
      amountCell.textContent = `${tx.amount.toFixed(2)} ‚Ç¥`;
      amountCell.style.color = tx.amount < 0 ? '#e74c3c' : '#2ecc71';
      row.appendChild(amountCell);
      
      const commentCell = document.createElement('td');
      commentCell.textContent = tx.comment;
      row.appendChild(commentCell);
      
      tbody.appendChild(row);
    });
    
    table.appendChild(tbody);
    content.appendChild(table);
  } else {
    // –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ –≤—ñ–¥—Å—É—Ç–Ω—ñ—Å—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤
    const emptyMessage = document.createElement('div');
    emptyMessage.className = 'result-modal-empty';
    emptyMessage.innerHTML = `
      <i>üìã</i>
      <p>–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.</p>
    `;
    content.appendChild(emptyMessage);
  }

  // –ë–ª–æ–∫ –∑ –∫–Ω–æ–ø–∫–∞–º–∏ –¥–ª—è –¥—ñ–π
  const actions = document.createElement('div');
  actions.className = 'result-modal-actions';
  
  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
  const closeAction = document.createElement('button');
  closeAction.className = 'secondary';
  closeAction.textContent = '–ó–∞–∫—Ä–∏—Ç–∏';
  closeAction.onclick = () => modalOverlay.remove();
  
  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —è–∫ —Ç–µ–∫—Å—Ç—É
  const copyTextButton = document.createElement('button');
  copyTextButton.textContent = '–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —è–∫ —Ç–µ–∫—Å—Ç';
  copyTextButton.onclick = () => {
    copyResultsAsText(reportData, periodInfo);
  };
  
  // –ö–Ω–æ–ø–∫–∞ –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —è–∫ CSV
  const copyCSVButton = document.createElement('button');
  copyCSVButton.textContent = '–ö–æ–ø—ñ—é–≤–∞—Ç–∏ —è–∫ CSV';
  copyCSVButton.onclick = () => {
    copyResultsAsCSV(reportData);
  };
  
  if (reportData.count > 0) {
    actions.appendChild(closeAction);
    actions.appendChild(copyCSVButton);
    actions.appendChild(copyTextButton);
  } else {
    actions.appendChild(closeAction);
  }

  // –ó–±–∏—Ä–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ
  modal.appendChild(header);
  modal.appendChild(content);
  modal.appendChild(actions);
  modalOverlay.appendChild(modal);
  
  // –î–æ–¥–∞—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –¥–æ —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  document.body.appendChild(modalOverlay);
  
  // –û–±—Ä–æ–±–Ω–∏–∫ –∫–ª–∞–≤—ñ—à—ñ Escape –¥–ª—è –∑–∞–∫—Ä–∏—Ç—Ç—è
  const escHandler = (e) => {
    if (e.key === 'Escape') {
      modalOverlay.remove();
      document.removeEventListener('keydown', escHandler);
    }
  };
  document.addEventListener('keydown', escHandler);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —è–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤–∞–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç—É
function copyResultsAsText(reportData, periodInfo) {
  let textResult = `=== –†–µ–∑—É–ª—å—Ç–∞—Ç–∏ –ø–æ—à—É–∫—É –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ ===\n`;
  textResult += `–ü–µ—Ä—ñ–æ–¥: ${periodInfo}\n`;
  textResult += `–ó–Ω–∞–π–¥–µ–Ω–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π: ${reportData.count}\n`;
  
  if (reportData.count > 0) {
    textResult += `–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${reportData.totalAmount.toFixed(2)} ‚Ç¥\n\n`;
    textResult += `–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó:\n`;
    
    reportData.transactions.forEach((tx, index) => {
      textResult += `${index + 1}. –î–∞—Ç–∞: ${tx.date}, –ß–∞—Å: ${tx.time}, –°—É–º–∞: ${tx.amount.toFixed(2)} ‚Ç¥\n`;
      textResult += `   –ö–æ–º–µ–Ω—Ç–∞—Ä: ${tx.comment}\n`;
    });
  }
  
  copyToClipboard(textResult);
}

// –§—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ —è–∫ CSV
function copyResultsAsCSV(reportData) {
  if (reportData.count === 0) return;
  
  // –ó–∞–≥–æ–ª–æ–≤–∫–∏ CSV
  let csvContent = '–î–∞—Ç–∞,–ß–∞—Å,–°—É–º–∞,–ö–æ–º–µ–Ω—Ç–∞—Ä\n';
  
  // –î–∞–Ω—ñ –ø—Ä–æ —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ—ó
  reportData.transactions.forEach(tx => {
    // –ï–∫—Ä–∞–Ω—É—î–º–æ –∫–æ–º–∏ —ñ –ø–æ–¥–≤—ñ–π–Ω—ñ –ª–∞–ø–∫–∏ –≤ –∫–æ–º–µ–Ω—Ç–∞—Ä—ñ
    const safeComment = tx.comment.replace(/"/g, '""');
    csvContent += `${tx.date},${tx.time},${tx.amount.toFixed(2)},"${safeComment}"\n`;
  });
  
  copyToClipboard(csvContent);
}

// –î–æ–ø–æ–º—ñ–∂–Ω–∞ —Ñ—É–Ω–∫—Ü—ñ—è –¥–ª—è –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É
function copyToClipboard(text) {
  navigator.clipboard.writeText(text)
    .then(() => {
      // –ü–æ–∫–∞–∑—É—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –ø—Ä–æ —É—Å–ø—ñ—à–Ω–µ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è
      const notification = document.createElement('div');
      notification.className = 'copy-success';
      notification.textContent = '–°–∫–æ–ø—ñ–π–æ–≤–∞–Ω–æ –≤ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É!';
      document.body.appendChild(notification);
      
      // –í–∏–¥–∞–ª—è—î–º–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è —á–µ—Ä–µ–∑ 2 —Å–µ–∫—É–Ω–¥–∏
      setTimeout(() => {
        notification.remove();
      }, 2000);
    })
    .catch(err => {
      console.error('–ü–æ–º–∏–ª–∫–∞ –∫–æ–ø—ñ—é–≤–∞–Ω–Ω—è —Ç–µ–∫—Å—Ç—É: ', err);
    });
}
function injectModalStyles() {
  if (document.getElementById('finmap-bot-modal-styles')) return;
  
  const styleSheet = document.createElement('style');
  styleSheet.id = 'finmap-bot-modal-styles';
  styleSheet.innerHTML = `
  /* –°—Ç–∏–ª—ñ –¥–ª—è –º–æ–¥–∞–ª—å–Ω–æ–≥–æ –≤—ñ–∫–Ω–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ñ–≤ */
  .result-modal-overlay {
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: rgba(0, 0, 0, 0.5);
    z-index: 1000;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .result-modal {
    background-color: #fff;
    border-radius: 8px;
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.15);
    width: 90%;
    max-width: 600px;
    max-height: 90vh;
    display: flex;
    flex-direction: column;
    overflow: hidden;
    animation: modalAppear 0.3s ease-out;
  }

  @keyframes modalAppear {
    from {
      opacity: 0;
      transform: translateY(20px);
    }
    to {
      opacity: 1;
      transform: translateY(0);
    }
  }

  .result-modal-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 16px 20px;
    background-color: #00B28E;
    color: white;
  }

  .result-modal-title {
    font-size: 18px;
    font-weight: 500;
    margin: 0;
  }

  .result-modal-close {
    background: none;
    border: none;
    color: white;
    font-size: 22px;
    cursor: pointer;
    padding: 0;
    line-height: 1;
    opacity: 0.8;
  }

  .result-modal-close:hover {
    opacity: 1;
  }

  .result-modal-content {
    padding: 20px;
    overflow-y: auto;
  }

  .result-modal-summary {
    margin-bottom: 16px;
    padding-bottom: 16px;
    border-bottom: 1px solid #eee;
  }

  .result-modal-summary p {
    margin: 6px 0;
    font-size: 15px;
  }

  .result-modal-summary .highlight {
    font-weight: 600;
    color: #00B28E;
  }

  .result-modal-table {
    width: 100%;
    border-collapse: collapse;
    margin-bottom: 16px;
  }

  .result-modal-table th {
    background-color: #f5f5f5;
    padding: 8px;
    text-align: left;
    font-weight: 500;
    border-bottom: 2px solid #eee;
  }

  .result-modal-table td {
    padding: 8px;
    border-bottom: 1px solid #eee;
    font-size: 14px;
  }

  .result-modal-table tr:hover {
    background-color: #f9f9f9;
  }

  .result-modal-actions {
    padding: 15px 20px;
    background-color: #f5f5f5;
    display: flex;
    justify-content: flex-end;
    gap: 10px;
  }

  .result-modal-actions button {
    background-color: #00B28E;
    color: white;
    border: none;
    padding: 8px 15px;
    border-radius: 4px;
    cursor: pointer;
    font-size: 14px;
    transition: background-color 0.2s;
  }

  .result-modal-actions button:hover {
    background-color: #009579;
  }

  .result-modal-actions button.secondary {
    background-color: #e0e0e0;
    color: #333;
  }

  .result-modal-actions button.secondary:hover {
    background-color: #d0d0d0;
  }

  .result-modal-empty {
    text-align: center;
    padding: 30px 0;
    color: #666;
  }

  .result-modal-empty i {
    font-size: 40px;
    color: #ddd;
    margin-bottom: 10px;
    display: block;
  }

  .copy-success {
    position: fixed;
    bottom: 20px;
    left: 50%;
    transform: translateX(-50%);
    background-color: #2ecc71;
    color: white;
    padding: 10px 20px;
    border-radius: 4px;
    box-shadow: 0 2px 10px rgba(0,0,0,0.1);
    z-index: 1001;
    animation: fadeInOut 2s ease-in-out;
  }

  @keyframes fadeInOut {
    0% { opacity: 0; }
    15% { opacity: 1; }
    85% { opacity: 1; }
    100% { opacity: 0; }
  }
  `;
  
  document.head.appendChild(styleSheet);
}
// --- Helper Functions ---

/**
 * Sends a status message back to the popup.
 * @param {string} text The message text.
 * @param {'pending'|'success'|'error'|'warning'} status The status type.
 * @param {boolean} done Indicates if the overall operation is finished.
 */
function sendStatus(text, status = 'pending', done = false) {
  console.log(`[Finmap Bot Status] ${status.toUpperCase()}: ${text}`);
  try {
    chrome.runtime.sendMessage({ type: 'status', text, status, done });
  } catch (error) {
    console.warn("Could not send message to popup. It might be closed.", error);
  }
}

/**
 * Waits for an element to appear in the DOM.
 * @param {string} selector CSS selector for the element.
 * @param {Element} parentElement Optional parent element to search within.
 * @param {number} timeout Maximum time to wait in milliseconds.
 * @returns {Promise<Element|null>} Resolves with the element or null if timed out.
 */
function waitForElement(selector, parentElement = document, timeout = MAX_WAIT_TIME) {
  return new Promise((resolve) => {
    const startTime = Date.now();
    const interval = setInterval(() => {
      const element = parentElement.querySelector(selector);
      if (element) {
        clearInterval(interval);
        resolve(element);
      } else if (Date.now() - startTime > timeout) {
        clearInterval(interval);
        console.warn(`Element "${selector}" not found within ${timeout}ms.`);
        resolve(null);
      }
    }, 100); // Check every 100ms
  });
}

/**
 * Simple delay function.
 * @param {number} ms Time to wait in milliseconds.
 * @returns {Promise<void>}
 */
function delay(ms) {
  return new Promise(resolve => setTimeout(resolve, ms));
}

// Month mapping for Ukrainian date parsing
const monthMapUA = {
  '—Å—ñ—á': 0, '–ª—é—Ç': 1, '–±–µ—Ä': 2, '–∫–≤—ñ': 3, '—Ç—Ä–∞': 4, '—á–µ—Ä': 5,
  '–ª–∏–ø': 6, '—Å–µ—Ä': 7, '–≤–µ—Ä': 8, '–∂–æ–≤': 9, '–ª–∏—Å': 10, '–≥—Ä—É': 11,
  '—Å—ñ—á–Ω—è': 0, '–ª—é—Ç–æ–≥–æ': 1, '–±–µ—Ä–µ–∑–Ω—è': 2, '–∫–≤—ñ—Ç–Ω—è': 3, '—Ç—Ä–∞–≤–Ω—è': 4, '—á–µ—Ä–≤–Ω—è': 5,
  '–ª–∏–ø–Ω—è': 6, '—Å–µ—Ä–ø–Ω—è': 7, '–≤–µ—Ä–µ—Å–Ω—è': 8, '–∂–æ–≤—Ç–Ω—è': 9, '–ª–∏—Å—Ç–æ–ø–∞–¥–∞': 10, '–≥—Ä—É–¥–Ω—è': 11
};

/**
 * Parses Ukrainian date strings (e.g., "1 –∫–≤—ñ—Ç 2025", "–°—å–æ–≥–æ–¥–Ω—ñ", "–í—á–æ—Ä–∞").
 * @param {string} dateString The date string to parse.
 * @returns {Date|null} Parsed Date object (set to 00:00:00) or null if parsing fails.
 */
function parseDateUA(dateString) {
  if (!dateString) return null;
  const normalizedDateString = dateString.trim().toLowerCase();

  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const yesterday = new Date(today);
  yesterday.setDate(today.getDate() - 1);

  if (normalizedDateString.includes('—Å—å–æ–≥–æ–¥–Ω—ñ')) {
      return today;
  }
  if (normalizedDateString.includes('–≤—á–æ—Ä–∞')) {
      return yesterday;
  }

  // Match "DD <month> YYYY" format
  const match = normalizedDateString.match(/(\d{1,2})\s+([–∞-—è—ñ—ó—î“ë']+)\s+(\d{4})/);
  if (match) {
    const day = parseInt(match[1], 10);
    const monthStr = match[2].substring(0, 3); // Use first 3 chars
    const year = parseInt(match[3], 10);

    if (!isNaN(day) && !isNaN(year) && monthStr in monthMapUA) {
      const month = monthMapUA[monthStr];
      try {
        // Check for invalid date construction (e.g., 31 –∫–≤—ñ—Ç)
        const tempDate = new Date(year, month, day);
        if (tempDate.getFullYear() === year && tempDate.getMonth() === month && tempDate.getDate() === day) {
             tempDate.setHours(0, 0, 0, 0); // Normalize time
             return tempDate;
        } else {
             console.warn(`–ù–µ–¥—ñ–π—Å–Ω–∞ –¥–∞—Ç–∞ (–¥–µ–Ω—å/–º—ñ—Å—è—Ü—å): ${dateString}`);
             return null;
        }
      } catch (e) {
        console.error(`–ü–æ–º–∏–ª–∫–∞ —Ä–æ–∑–±–æ—Ä—É –¥–∞—Ç–∏: ${dateString}`, e);
        return null;
      }
    }
  }

  console.warn(`–ù–µ –≤–¥–∞–ª–æ—Å—è —Ä–æ–∑–ø—ñ–∑–Ω–∞—Ç–∏ —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç–∏: ${dateString}`);
  return null;
}


/**
 * Formats a Date object into YYYY-MM-DD string.
 * @param {Date} date The Date object.
 * @returns {string} Formatted date string.
 */
function formatDate(date) {
  if (!(date instanceof Date) || isNaN(date)) {
      return 'Invalid Date';
  }
  const year = date.getFullYear();
  const month = (date.getMonth() + 1).toString().padStart(2, '0');
  const day = date.getDate().toString().padStart(2, '0');
  return `${year}-${month}-${day}`;
}

/**
 * Applies or removes highlighting styles to a transaction row.
 * @param {Element} rowElement The transaction row element.
 * @param {'period'|'match'|null} type The type of highlight ('period', 'match') or null to remove.
 */
function highlightRow(rowElement, type) {
  if (!rowElement) return;
  // Reset styles first
  rowElement.style.backgroundColor = '';
  rowElement.style.border = '';
  rowElement.style.boxSizing = ''; // Reset box-sizing if border was added

  if (type === 'period') {
    rowElement.style.backgroundColor = HIGHLIGHT_PERIOD_COLOR;
    rowElement.style.border = HIGHLIGHT_BORDER;
    rowElement.style.boxSizing = 'border-box'; // Ensure border doesn't affect layout
  } else if (type === 'match') {
    rowElement.style.backgroundColor = HIGHLIGHT_MATCH_COLOR;
    rowElement.style.border = HIGHLIGHT_BORDER;
     rowElement.style.boxSizing = 'border-box';
  }
}

/**
 * Clears all highlights from transaction rows.
 */
function clearAllHighlights() {
    console.log('–û—á–∏—â–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—ñ—Ö –≤–∏–¥—ñ–ª–µ–Ω—å...');
    const highlightedRows = document.querySelectorAll(`${TRANSACTION_ROW_SELECTOR}[style*="background-color"]`);
    highlightedRows.forEach(row => highlightRow(row, null));
    console.log(`–û—á–∏—â–µ–Ω–æ –≤–∏–¥—ñ–ª–µ–Ω–Ω—è –∑ ${highlightedRows.length} —Ä—è–¥–∫—ñ–≤.`);
}


// --- Main Logic ---

/**
 * Ensures the date filter is set to "–ó–∞ –≤–µ—Å—å —á–∞—Å".
 * @returns {Promise<boolean>} True if successful or already set, false otherwise.
 */
async function ensureAllTimeSelected() {
  sendStatus('–ö—Ä–æ–∫ 1: –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ —Ñ—ñ–ª—å—Ç—Ä–∞ "–ó–∞ –≤–µ—Å—å —á–∞—Å"...');
  try {
    // Find the main date filter button more reliably
    const dateButtons = Array.from(document.querySelectorAll(ALL_TIME_BUTTON_SELECTOR));
    const dateButton = dateButtons.find(btn => btn.querySelector(ALL_TIME_BUTTON_TEXT_SELECTOR)); // Find the button containing the specific text element

    if (!dateButton) {
        sendStatus('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–Ω–æ–ø–∫—É —Ñ—ñ–ª—å—Ç—Ä–∞ –¥–∞—Ç–∏.', 'error');
        return false;
    }

    const buttonTextElement = dateButton.querySelector(ALL_TIME_BUTTON_TEXT_SELECTOR);
    const currentText = buttonTextElement ? buttonTextElement.textContent.trim() : '';

    if (currentText === ALL_TIME_TEXT) {
      sendStatus('–§—ñ–ª—å—Ç—Ä "–ó–∞ –≤–µ—Å—å —á–∞—Å" –≤–∂–µ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.', 'success');
      return true;
    }

    sendStatus(`–ü–æ—Ç–æ—á–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä: "${currentText}". –í—Å—Ç–∞–Ω–æ–≤–ª—é—î–º–æ "${ALL_TIME_TEXT}"...`);
    dateButton.click();

    // Wait for the menu to appear (often in a Popper or similar container)
    // Need a more robust way than just waiting for the ul by id
    const menuPopup = await waitForElement('.MuiPopover-paper, .MuiMenu-paper', document.body); // Wait for the popup paper element
    if (!menuPopup) {
        sendStatus('–ü–æ–º–∏–ª–∫–∞: –ú–µ–Ω—é –≤–∏–±–æ—Ä—É –ø–µ—Ä—ñ–æ–¥—É –Ω–µ –∑\'—è–≤–∏–ª–æ—Å—è.', 'error');
        return false;
    }
    await delay(200); // Extra small delay for menu items to render

    // Find the "–ó–∞ –≤–µ—Å—å —á–∞—Å" item within the visible menu
    const menuItems = Array.from(menuPopup.querySelectorAll(ALL_TIME_MENU_ITEM_SELECTOR));
    const allTimeMenuItem = menuItems.find(item => item.textContent.trim() === ALL_TIME_TEXT);


    if (!allTimeMenuItem) {
      sendStatus(`–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—É–Ω–∫—Ç "${ALL_TIME_TEXT}" —É –º–µ–Ω—é.`, 'error');
       // Attempt to close the menu if possible
      const backdrop = document.querySelector('.MuiBackdrop-root');
      if (backdrop) backdrop.click();
      return false;
    }

    // Click the parent list item (li)
     const listItem = allTimeMenuItem.closest('li.MuiMenuItem-root');
     if (listItem) {
        listItem.click();
        sendStatus(`–ü—É–Ω–∫—Ç "${ALL_TIME_TEXT}" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ.`);
        await delay(500); // Wait for the change to apply

        // Verify the change
        const updatedButtonTextElement = dateButton.querySelector(ALL_TIME_BUTTON_TEXT_SELECTOR);
        const updatedText = updatedButtonTextElement ? updatedButtonTextElement.textContent.trim() : '';
        if (updatedText === ALL_TIME_TEXT) {
            sendStatus('–§—ñ–ª—å—Ç—Ä "–ó–∞ –≤–µ—Å—å —á–∞—Å" —É—Å–ø—ñ—à–Ω–æ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ.', 'success');
            return true;
        } else {
             sendStatus(`–ü–æ–º–∏–ª–∫–∞: –¢–µ–∫—Å—Ç –∫–Ω–æ–ø–∫–∏ –Ω–µ –æ–Ω–æ–≤–∏–≤—Å—è –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É (–∑–∞–ª–∏—à–∏–≤—Å—è "${updatedText}").`, 'error');
             return false;
        }
     } else {
         sendStatus(`–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –±–∞—Ç—å–∫—ñ–≤—Å—å–∫–∏–π –µ–ª–µ–º–µ–Ω—Ç 'li' –¥–ª—è "${ALL_TIME_TEXT}".`, 'error');
         return false;
     }


  } catch (error) {
    sendStatus(`–ü–æ–º–∏–ª–∫–∞ –Ω–∞ –∫—Ä–æ—Ü—ñ 1: ${error.message}`, 'error');
    console.error("–î–µ—Ç–∞–ª—ñ –ø–æ–º–∏–ª–∫–∏ –ö—Ä–æ–∫—É 1:", error);
    return false;
  }
}

/**
 * Scrolls through the transaction list, analyzes, and highlights entries.
 * Sends the final report back via sendStatus.
 * @param {'today'|'yesterday'|'custom'} periodType Type of period selected.
 * @param {string} startDate YYYY-MM-DD start date for 'custom'.
 * @param {string} endDate YYYY-MM-DD end date for 'custom'.
 * @param {boolean} findCashWithdrawals Whether to find cash withdrawals.
 * @param {string} cashWithdrawalText Text to search for in comments.
 */
// Modified scrollAndProcessTransactions function with improved stop logic

async function scrollAndProcessTransactions(periodType, startDate, endDate, findCashWithdrawals, cashWithdrawalText) {
  injectModalStyles();
  sendStatus('–ö—Ä–æ–∫ 2: –ü–æ—á–∞—Ç–æ–∫ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π...');
  clearAllHighlights(); // Clear previous highlights

  const scrollContainer = await waitForElement(TRANSACTION_LIST_SELECTOR);
  if (!scrollContainer) {
      sendStatus('–ü–æ–º–∏–ª–∫–∞: –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.', 'error', true);
      return;
  }

  // --- Determine Date Range ---
  const today = new Date();
  today.setHours(0, 0, 0, 0);
  const yesterday = new Date(today);
  yesterday.setDate(today.getDate() - 1);

  let targetStartDate, targetEndDate, stopScrollingDate;

  try {
      if (periodType === 'today') {
          targetStartDate = new Date(today);
          targetEndDate = new Date(today);
          stopScrollingDate = new Date(yesterday); // Stop when we see yesterday's date
          sendStatus(`–¶—ñ–ª—å–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥: –°—å–æ–≥–æ–¥–Ω—ñ (${formatDate(targetStartDate)})`);
          sendStatus(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—è–≤–∏ –¥–∞—Ç–∏: ${formatDate(stopScrollingDate)}`);
      } else if (periodType === 'yesterday') {
          targetStartDate = new Date(yesterday);
          targetEndDate = new Date(yesterday);
          const dayBeforeYesterday = new Date(yesterday);
          dayBeforeYesterday.setDate(yesterday.getDate() - 1);
          stopScrollingDate = new Date(dayBeforeYesterday); // Stop when we see day before yesterday
          sendStatus(`–¶—ñ–ª—å–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥: –í—á–æ—Ä–∞ (${formatDate(targetStartDate)})`);
          sendStatus(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—è–≤–∏ –¥–∞—Ç–∏: ${formatDate(stopScrollingDate)}`);
      } else { // custom
          if (!startDate || !endDate) {
               sendStatus('–ü–æ–º–∏–ª–∫–∞: –î–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É –Ω–µ –≤–∫–∞–∑–∞–Ω–æ –¥–∞—Ç.', 'error', true);
               return;
          }
          targetStartDate = new Date(startDate + 'T00:00:00');
          targetEndDate = new Date(endDate + 'T00:00:00');
          targetStartDate.setHours(0,0,0,0);
          targetEndDate.setHours(0,0,0,0);

          if (isNaN(targetStartDate) || isNaN(targetEndDate)) {
              sendStatus('–ü–æ–º–∏–ª–∫–∞: –ù–µ–¥—ñ–π—Å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç –¥–ª—è –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–æ–≥–æ –ø–µ—Ä—ñ–æ–¥—É.', 'error', true);
              return;
          }
          
          // Set stopScrollingDate to the day before the start date
          stopScrollingDate = new Date(targetStartDate);
          stopScrollingDate.setDate(targetStartDate.getDate() - 1);
          sendStatus(`–¶—ñ–ª—å–æ–≤–∏–π –ø–µ—Ä—ñ–æ–¥: ${formatDate(targetStartDate)} - ${formatDate(targetEndDate)}`);
          sendStatus(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –ø–æ—è–≤–∏ –¥–∞—Ç–∏: ${formatDate(stopScrollingDate)}`);
      }
  } catch (e) {
       sendStatus(`–ü–æ–º–∏–ª–∫–∞ –≤–∏–∑–Ω–∞—á–µ–Ω–Ω—è –ø–µ—Ä—ñ–æ–¥—É: ${e.message}`, 'error', true);
       console.error("Date parsing error:", e);
       return;
  }

  let processedRowIndexes = new Set();
  let matchedTransactions = []; // Array to hold unique matched transactions
  let lastScrollTop = -1;
  let reachedStopDate = false;
  let inactivityCounter = 0;
  const MAX_INACTIVITY = 5;
  
  // Add tracking variables to help debug
  let debugDatesFound = [];
  let debugOldestDate = null;

  while (!reachedStopDate && inactivityCounter < MAX_INACTIVITY) {
      const currentScrollTop = scrollContainer.scrollTop;
      
      if (inactivityCounter === 0 && processedRowIndexes.size % 10 < 2) {
           sendStatus(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞: –ø–æ–∑–∏—Ü—ñ—è ${currentScrollTop}, –æ–±—Ä–æ–±–ª–µ–Ω–æ ~${processedRowIndexes.size} —Ä—è–¥–∫—ñ–≤.`);
      }

      const rows = scrollContainer.querySelectorAll(TRANSACTION_ROW_SELECTOR);
      let foundNewRows = false;
      let currentOldestVisibleDate = null;

      for (const row of rows) {
          const rowIndex = row.style.top;
          if (!rowIndex || processedRowIndexes.has(rowIndex)) {
              continue;
          }
          processedRowIndexes.add(rowIndex); // Mark as processed immediately
          foundNewRows = true;

          // --- Analyze Row ---
          const dateElement = row.querySelector(DATE_SELECTOR);
          const amountElement = row.querySelector(AMOUNT_SELECTOR);
          const commentElement = row.querySelector(COMMENT_SELECTOR);

          if (!dateElement || !amountElement) continue;

          const dateStr = dateElement.textContent.trim();
          const transactionDate = parseDateUA(dateStr);

          if (!transactionDate) continue;
          
          // Add to debug dates collection
          debugDatesFound.push({
              str: dateStr,
              date: formatDate(transactionDate)
          });

          // Track oldest date we've found
          if (!currentOldestVisibleDate || transactionDate < currentOldestVisibleDate) {
              currentOldestVisibleDate = transactionDate;
              debugOldestDate = {
                  str: dateStr,
                  date: formatDate(transactionDate)
              };
          }

          // --- Highlighting & Matching Logic ---
          let highlightType = null;
          const isWithinPeriod = transactionDate >= targetStartDate && transactionDate <= targetEndDate;

          if (isWithinPeriod) {
              highlightType = 'period';

              if (findCashWithdrawals && cashWithdrawalText) {
                  const amountStr = amountElement.textContent.replace(/\s|‚Ç¥/g, '').replace(',', '.');
                  const amount = parseFloat(amountStr);
                  const commentStr = commentElement ? commentElement.textContent.trim() : '';

                  if (amount < 0 && commentStr.toLowerCase().includes(cashWithdrawalText.toLowerCase())) {
                      highlightType = 'match';
                      const transactionData = {
                          date: formatDate(transactionDate),
                          time: dateElement.nextElementSibling ? dateElement.nextElementSibling.textContent.trim() : 'N/A',
                          amount: amount,
                          comment: commentStr,
                          rawDateStr: dateStr,
                      };

                      const isDuplicate = matchedTransactions.some(existingTx =>
                          existingTx.date === transactionData.date &&
                          existingTx.amount === transactionData.amount &&
                          existingTx.comment === transactionData.comment
                      );

                      if (!isDuplicate) {
                          matchedTransactions.push(transactionData);
                      }
                  }
              }
          }
          highlightRow(row, highlightType);
      } // End row processing loop

      // --- Enhanced Debug Logging for Oldest Date ---
      if (currentOldestVisibleDate) {
          // Log more detailed information about the dates we're comparing
          console.log(`Current oldest visible date: ${formatDate(currentOldestVisibleDate)}, Stop date: ${formatDate(stopScrollingDate)}`);
          console.log(`Comparison result: ${currentOldestVisibleDate <= stopScrollingDate}`);
          
          // Check both date and time components
          console.log(`Date components - Oldest: ${currentOldestVisibleDate.getFullYear()}-${currentOldestVisibleDate.getMonth()}-${currentOldestVisibleDate.getDate()}`);
          console.log(`Date components - Stop: ${stopScrollingDate.getFullYear()}-${stopScrollingDate.getMonth()}-${stopScrollingDate.getDate()}`);
      }

      // --- FIXED: Improved Stop Condition ---
      if (currentOldestVisibleDate && currentOldestVisibleDate <= stopScrollingDate) {
          // Another safeguard: check if the dates are actually different when formatted
          const oldestDateFormatted = formatDate(currentOldestVisibleDate);
          const stopDateFormatted = formatDate(stopScrollingDate);
          
          if (oldestDateFormatted <= stopDateFormatted) {
              reachedStopDate = true;
              sendStatus(`–î–æ—Å—è–≥–Ω—É—Ç–æ —Ü—ñ–ª—å–æ–≤–æ—ó –¥–∞—Ç–∏ –∑—É–ø–∏–Ω–∫–∏ (–Ω–∞–π—Å—Ç–∞—Ä—ñ—à–∞ –≤–∏–¥–∏–º–∞ –¥–∞—Ç–∞: ${oldestDateFormatted}, —Ü—ñ–ª—å–æ–≤–∞ –¥–∞—Ç–∞ –∑—É–ø–∏–Ω–∫–∏: ${stopDateFormatted}), –∑—É–ø–∏–Ω–∫–∞ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏.`, 'success');
              break;
          } else {
              sendStatus(`–î–∞—Ç–∏ –ø–æ—Ä—ñ–≤–Ω—é—é—Ç—å—Å—è –Ω–µ—Ä—ñ–≤–Ω–æ: ${oldestDateFormatted} vs ${stopDateFormatted}. –ü—Ä–æ–¥–æ–≤–∂—É—î–º–æ –ø—Ä–æ–∫—Ä—É—Ç–∫—É.`, 'warning');
          }
      }

      // --- Scroll Down ---
      lastScrollTop = currentScrollTop;
      scrollContainer.scrollTop += SCROLL_STEP;

      // --- Wait After Scrolling ---
      await delay(SCROLL_DELAY);

      // --- Check for Inactivity / Reaching Bottom ---
      const newScrollTop = scrollContainer.scrollTop;
      const scrollHeight = scrollContainer.scrollHeight;
      const reachedBottom = (scrollHeight > 0) && (newScrollTop + scrollContainer.clientHeight >= scrollHeight - 20);

      if (newScrollTop === lastScrollTop) {
           if (!foundNewRows) {
               inactivityCounter++;
               sendStatus(`–ü—Ä–æ–∫—Ä—É—Ç–∫–∞ –Ω–µ –∑–º—ñ–Ω–∏–ª–∞ –ø–æ–∑–∏—Ü—ñ—é —Ç–∞ –Ω–æ–≤–∏—Ö —Ä—è–¥–∫—ñ–≤ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ (${inactivityCounter}/${MAX_INACTIVITY})...`);
               
               // Enhanced debugging - if we're stuck, report what dates we found
               if (inactivityCounter === 3) {
                   console.log("DEBUG: Last dates found:", debugDatesFound.slice(-5));
                   console.log("DEBUG: Oldest date found:", debugOldestDate);
               }
           } else {
               inactivityCounter = 0;
           }
      } else if (reachedBottom) {
           sendStatus('–î–æ—Å—è–≥–Ω—É—Ç–æ –∫—ñ–Ω—Ü—è —Å–ø–∏—Å–∫—É —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π.', 'success');
           break;
      } else {
           inactivityCounter = 0;
      }
      
      // Force break if we've processed too many rows (emergency exit)
      if (processedRowIndexes.size > 1000) {
          sendStatus('–î–æ—Å—è–≥–Ω—É—Ç–æ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ—ó –∫—ñ–ª—å–∫–æ—Å—Ç—ñ –æ–±—Ä–æ–±–ª–µ–Ω–∏—Ö —Ä—è–¥–∫—ñ–≤ (1000+). –ó—É–ø–∏–Ω–∫–∞ –¥–ª—è —É–Ω–∏–∫–Ω–µ–Ω–Ω—è –∑–∞–≤–∏—Å–∞–Ω–Ω—è.', 'warning');
          break;
      }
  } // End while loop

  // --- Final Report ---
  sendStatus('–ö—Ä–æ–∫ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É...', 'pending');

  // Prepare report data to send back
  
  sendStatus('–ö—Ä–æ–∫ 3: –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—è –∞–Ω–∞–ª—ñ–∑—É —Ç–∞ –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –∑–≤—ñ—Ç—É...', 'pending');

  // Prepare report data to send back
  const reportData = {
      count: matchedTransactions.length,
      totalAmount: matchedTransactions.reduce((sum, tx) => sum + tx.amount, 0),
      transactions: matchedTransactions // Include the actual list
  };
  
  // –ü—ñ–¥–≥–æ—Ç–æ–≤–∫–∞ —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –ø–µ—Ä—ñ–æ–¥ –¥–ª—è –≤—ñ–¥–æ–±—Ä–∞–∂–µ–Ω–Ω—è –≤ –º–æ–¥–∞–ª—å–Ω–æ–º—É –≤—ñ–∫–Ω—ñ
  let periodInfo = '';
  if (periodType === 'today') {
      periodInfo = `–°—å–æ–≥–æ–¥–Ω—ñ (${formatDate(targetStartDate)})`;
  } else if (periodType === 'yesterday') {
      periodInfo = `–í—á–æ—Ä–∞ (${formatDate(targetStartDate)})`;
  } else {
      periodInfo = `${formatDate(targetStartDate)} - ${formatDate(targetEndDate)}`;
  }
  
  // –ü–æ–∫–∞–∑—É—î–º–æ –º–æ–¥–∞–ª—å–Ω–µ –≤—ñ–∫–Ω–æ –∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
  showResultsModal(reportData, periodInfo);
  
  if (reportData.count > 0) {
      const summary = `–ó–Ω–∞–π–¥–µ–Ω–æ ${reportData.count} —Ç—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏. –ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${reportData.totalAmount.toFixed(2)} ‚Ç¥.`;
      // Send final success status WITH report data and done:true
      sendStatus(summary, 'success', true, reportData); // Add reportData here
      console.log("--- –§—ñ–Ω–∞–ª—å–Ω–∏–π –ó–≤—ñ—Ç (—Ç–∞–∫–æ–∂ –Ω–∞–¥—ñ—Å–ª–∞–Ω–æ –≤ —Ä–æ–∑—à–∏—Ä–µ–Ω–Ω—è) ---");
      console.table(reportData.transactions);
      console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ —Å—É–º–∞: ${reportData.totalAmount.toFixed(2)} ‚Ç¥`);
      console.log("--------------------------------------------------");
  } else if (findCashWithdrawals) {
      // Send final warning status with empty report data and done:true
      sendStatus('–¢—Ä–∞–Ω–∑–∞–∫—Ü—ñ–π –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏ –∑–∞ –≤–∫–∞–∑–∞–Ω–∏–º–∏ –∫—Ä–∏—Ç–µ—Ä—ñ—è–º–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.', 'warning', true, reportData);
  } else {
      // Send final success status with empty report data (as none were searched for) and done:true
      sendStatus('–ê–Ω–∞–ª—ñ–∑ –ø–µ—Ä—ñ–æ–¥—É –∑–∞–≤–µ—Ä—à–µ–Ω–æ (–±–µ–∑ –ø–æ—à—É–∫—É –∑–Ω—è—Ç—Ç—è –≥–æ—Ç—ñ–≤–∫–∏).', 'success', true, reportData);
  }
}

// --- Event Listener for messages from popup ---
chrome.runtime.onMessage.addListener((request, sender, sendResponse) => {
  console.log('–û—Ç—Ä–∏–º–∞–Ω–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', request); // Log received message

  if (request.action === "selectAllTime") {
    sendStatus('–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—è "–ó–∞ –≤–µ—Å—å —á–∞—Å"...', 'pending');
    ensureAllTimeSelected()
      .then(success => {
        sendStatus('–û–ø–µ—Ä–∞—Ü—ñ—è "selectAllTime" –∑–∞–≤–µ—Ä—à–µ–Ω–∞.', success ? 'success' : 'error', true); // Signal completion
        sendResponse({ status: success ? 'completed' : 'failed' });
      })
      .catch(error => {
        sendStatus(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ ensureAllTimeSelected: ${error.message}`, 'error', true);
        console.error(error);
        sendResponse({ status: 'failed', error: error.message });
      });
    return true; // Indicates asynchronous response
  }

   if (request.action === "filterByDate") {
    sendStatus('–û—Ç—Ä–∏–º–∞–Ω–æ –∑–∞–ø–∏—Ç –Ω–∞ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é –∑–∞ –¥–∞—Ç–æ—é...', 'pending');
    // Ensure "–ó–∞ –≤–µ—Å—å —á–∞—Å" is set *before* starting the scroll/filter
    ensureAllTimeSelected().then(allTimeSuccess => {
        if (allTimeSuccess) {
            sendStatus('–ü–µ—Ä–µ–¥—É–º–æ–≤–∞ "–ó–∞ –≤–µ—Å—å —á–∞—Å" –≤–∏–∫–æ–Ω–∞–Ω–∞, –ø–æ—á–∏–Ω–∞—î–º–æ —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é...');
            scrollAndProcessTransactions(
                request.periodType,
                request.startDate,
                request.endDate,
                request.findCashWithdrawals,
                request.cashWithdrawalText
            )
            .then(() => {
                // Status is sent within scrollAndProcessTransactions at the end
                sendResponse({ status: 'started_filtering' }); // Respond that filtering started
            })
             .catch(error => {
                sendStatus(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –≤ scrollAndProcessTransactions: ${error.message}`, 'error', true);
                console.error(error);
                sendResponse({ status: 'failed_filtering', error: error.message });
            });
        } else {
            sendStatus('–ù–µ –≤–¥–∞–ª–æ—Å—è –≤—Å—Ç–∞–Ω–æ–≤–∏—Ç–∏ "–ó–∞ –≤–µ—Å—å —á–∞—Å", —Ñ—ñ–ª—å—Ç—Ä–∞—Ü—ñ—é —Å–∫–∞—Å–æ–≤–∞–Ω–æ.', 'error', true);
            sendResponse({ status: 'failed_prerequisite' });
        }
    }).catch(error => {
         sendStatus(`–ö—Ä–∏—Ç–∏—á–Ω–∞ –ø–æ–º–∏–ª–∫–∞ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ "–ó–∞ –≤–µ—Å—å —á–∞—Å": ${error.message}`, 'error', true);
         console.error(error);
         sendResponse({ status: 'failed_prerequisite', error: error.message });
    });


    return true; // Indicates asynchronous response
  }

  // Handle other potential actions if needed
  return false; // Indicates synchronous response or no handler
});

sendStatus("Content script –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ —Ç–∞ –≥–æ—Ç–æ–≤–∏–π –¥–æ —Ä–æ–±–æ—Ç–∏.");